import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, f1_score
import streamlit as st
import time
import joblib  # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞

# --- –§–£–ù–ö–¶–ò–Ø –û–ë–£–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ò ---
@st.cache_data
def train_model():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    df = pd.read_csv("processed_L_Score.csv")
    
    X = df.drop(columns=['L_Status'])
    y = df['L_Status']
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏
    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2, stratify=y)
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = XGBClassifier(random_state=42, eval_metric='logloss')
    model.fit(X_train, y_train)
    
    # –û—Ü–µ–Ω–∫–∞
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    
    return model, X.columns.tolist(), accuracy, f1


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="CreditScore PRO",
        page_icon="üí∞",
        layout="centered",
        initial_sidebar_state="expanded"
    )

    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    st.markdown("""
    <style>
        .header-style {
            font-size: 24px;
            font-weight: bold;
            color: #2e86c1;
        }
        .metric-value {
            font-size: 28px !important;
            font-weight: bold !important;
        }
        .stSpinner > div {
            text-align: center;
            margin-top: 10px;
        }
        .risk-indicator {
            transition: all 0.5s ease;
        }
        .pulse-animation {
            animation: pulse 1.5s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        .approved {
            color: #2ecc71;
            font-weight: bold;
        }
        .rejected {
            color: #e74c3c;
            font-weight: bold;
        }
    </style>
    """, unsafe_allow_html=True)

    # --- –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò –ò –ü–†–ï–ü–†–û–¶–ï–°–°–û–†–ê ---
    with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥'):
        model, feature_columns, accuracy, f1 = train_model()

    try:
        preprocessor = joblib.load('preprocessor.pkl')
    except FileNotFoundError:
        st.error("–§–∞–π–ª 'preprocessor.pkl' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return

    # --- –ò–ù–¢–ï–†–§–ï–ô–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
    st.markdown('<p class="header-style">CreditScore PRO</p>', unsafe_allow_html=True)
    st.caption("–°–∏—Å—Ç–µ–º–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–æ–∫")

    # --- –§–û–†–ú–ê –í–í–û–î–ê –î–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–ê ---
    with st.form("credit_form"):
        st.subheader("–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞")
        
        input_values = {}
        cols = st.columns(2)
        
        with cols[0]:
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            input_values['P_Gender'] = st.selectbox("–ü–æ–ª", ['male', 'female'], key='P_Gender')
            input_values['P_Education'] = st.selectbox(
                "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", 
                ['High School', 'Associate', 'Bachelor', 'Master', 'Doctorate'],
                key='P_Education'
            )
            input_values['P_Home'] = st.selectbox(
                "–¢–∏–ø –∂–∏–ª—å—è", 
                ['OWN', 'MORTGAGE', 'RENT', 'OTHER'],
                key='P_Home'
            )
            input_values['L_Intent'] = st.selectbox(
                "–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞", 
                ['PERSONAL', 'EDUCATION', 'MEDICAL', 'VENTURE', 'HOMEIMPROVEMENT', 'DEBTCONSOLIDATION'],
                key='L_Intent'
            )
            
        with cols[1]:
            # –ß–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            input_values['P_Age'] = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=18, max_value=100, value=30, key='P_Age')
            input_values['P_Income'] = st.number_input("–î–æ—Ö–æ–¥ (–≥–æ–¥–æ–≤–æ–π)", min_value=0, value=50000, key='P_Income')
            input_values['P_Emp_Exp'] = st.number_input("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)", min_value=0, max_value=50, value=3, key='P_Emp_Exp')
            input_values['L_Amount'] = st.number_input("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞", min_value=0, value=10000, key='L_Amount')
            input_values['L_Rate'] = st.number_input("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞", min_value=0.0, max_value=30.0, value=10.0, key='L_Rate')
            input_values['L_Pers_Income'] = st.number_input(
                "–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –∫ –¥–æ—Ö–æ–¥—É", 
                min_value=0.0, max_value=1.0, value=0.3, key='L_Pers_Income'
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        input_values['Credit_History'] = st.selectbox(
            "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è (—Ä–µ–π—Ç–∏–Ω–≥)", 
            [1.0, 2.0, 3.0, 4.0],
            format_func=lambda x: f"{x:.0f}",
            key='Credit_History'
        )
        input_values['L_Defaults'] = st.selectbox(
            "–ë—ã–ª–∏ –ª–∏ –¥–µ—Ñ–æ–ª—Ç—ã", 
            ['No', 'Yes'],
            key='L_Defaults'
        )
        
        submitted = st.form_submit_button("–û—Ü–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", type="primary")

    # --- –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ---
    if submitted:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
            input_df = pd.DataFrame([input_values])

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            input_processed = preprocessor.transform(input_df)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = model.predict(input_processed)[0]
            proba = model.predict_proba(input_processed)[0][1]

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.markdown("---")
            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏")
            
            if prediction == 1:
                st.markdown(f'<p class="approved">‚úÖ –ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω!</p>', unsafe_allow_html=True)
                st.balloons()
            else:
                st.markdown(f'<p class="rejected">‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω</p>', unsafe_allow_html=True)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
            st.write(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è: {proba*100:.1f}%")
            progress_bar = st.progress(0)
            for percent_complete in range(int(proba*100)):
                time.sleep(0.01)
                progress_bar.progress(percent_complete + 1)
            progress_bar.progress(float(proba))
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            with st.expander("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
                if prediction == 0:
                    st.write("""
                    **–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞:**
                    - –í—ã—Å–æ–∫–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –∫ –¥–æ—Ö–æ–¥—É
                    - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                    - –ù–∞–ª–∏—á–∏–µ –¥–µ—Ñ–æ–ª—Ç–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏
                    - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
                    """)
                    st.write("**–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:**")
                    st.write("- –£–º–µ–Ω—å—à–∏—Ç–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞")
                    st.write("- –£–ª—É—á—à–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é")
                    st.write("- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—Ä–µ–¥–∏—Ç —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π")
                else:
                    st.write("""
                    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
                    - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –∫—Ä–µ–¥–∏—Ç
                    - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –ø–æ–≥–∞—à–µ–Ω–∏—è
                    - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞
                    """)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –∑–∞—è–≤–∫–∏: {str(e)}")

    # --- –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ –° –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô ---
    with st.sidebar:
        st.header("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
        st.info("CreditScore PRO –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
        
        st.markdown("---")
        st.write("üìä **–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏:**")
        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.2%}")
        st.metric("F1-score", f"{f1:.2%}")
        
        st.markdown("---")
        st.write("**üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**")
        st.write("1. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞")
        st.write("2. –ù–∞–∂–º–∏—Ç–µ '–û—Ü–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É'")
        st.write("3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        st.markdown("---")
        st.write("**üîç –í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:**")
        st.write("- –•–æ—Ä–æ—à–∞—è –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è")
        st.write("- –ù–∏–∑–∫–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ –∫ –¥–æ—Ö–æ–¥—É")
        st.write("- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–µ—Ñ–æ–ª—Ç–æ–≤")
        st.write("- –î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã")
        st.write("- –ê–¥–µ–∫–≤–∞—Ç–Ω–∞—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞")


# --- –¢–û–ß–ö–ê –í–•–û–î–ê ---
if __name__ == "__main__":
    main()
